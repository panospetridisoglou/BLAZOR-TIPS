@inject IJSRuntime js;
@using Shared.Models;
@page "/SmartInput"

@if (Dropdown_List != null)
{
    <div class="input-group ">

        <input type="text" @bind-value="text" class="form-control form-control-dark autocomplete" style=" height:auto;" @bind-value:event="oninput" @onkeyup="(()=>autosuggest(false))" @onfocusout="hideDisplay" />
        <div style="cursor:pointer" class="input-group-append">
            <div @onclick="toggleDisplay"  class="input-group-text dark-theme">
                <span  class="oi oi-chevron-bottom"></span>
            </div>
        </div>
    </div>
    <div class="@dd" style=" position: relative; ">
        @DynamicRender
    </div>
}
else
{
    <input type="text" @bind-value="text" class="form-control form-control-dark autocomplete" style=" height:auto;" @bind-value:event="oninput" @onkeyup="(()=>autosuggest(false))" @onfocusout="hideDisplay" />

}


@code {

    [Parameter]
    public bool Validate { get; set; }

    [Parameter]
    public int ValidationType { get; set; }

    [Parameter]
    public Dictionary<String, List<String>> Dropdown_List { get; set; }


    string dd = "unhide";
    private int seq = 0;
    public string text = "";
    private static List<String> activity_types = new List<string>(); //LOAD ALL TYPES
    private static List<String> employees_and_groups = new List<string>(); //LOAD ALL TYPES
    private static List<String> activity_titles = new List<string>();
    //LOAD ALL TYPES

    private RenderFragment DynamicRender { get; set; }

    private void hideDisplay()
    {

        dd = "hide";


    }

    private async void  toggleDisplay()
    {
        if (dd == "hide")
        {
            await autosuggest(true);
        }
        else {
            hideDisplay();
        }
    }


    //NOT YET IMPLEMENTED
    private void validateText() {
        if (Validate)
        {
            if (ValidationType == SmartInput_ValidationTypes.Type_Integer)
            {
                try
                {
                    int.Parse(text);
                }
                catch
                {

                }
            }
        }
    }

    protected override Task OnInitializedAsync()
    {
        /* TESTING DATA */
        if (activity_titles.Count() == 0)
        {
            //LOAD STRING LISTS
            activity_titles.Add("DA D".ToUpper());
            activity_titles.Add("DA D".ToUpper());
            activity_titles.Add("DA D".ToUpper());
            activity_titles.Add("DA D".ToUpper());
            activity_titles.Add("DA D".ToUpper());

        }
        Dropdown_List = new Dictionary<String, List<String>>();
        Dropdown_List.Add("DA", activity_titles);
        Dropdown_List.Add("DADE", new List<string> { "DADAWD", "DEDADAEDE" });




        return base.OnInitializedAsync();

    }
    protected async Task autosuggest(bool force=false)
    {
        if (force) {
            DynamicRender = (await CreateComponent(true));

        }
        else
        {
            DynamicRender = (await CreateComponent());

        }
        dd = "unhide";

    }
    private async Task<RenderFragment> CreateComponent(bool force=false) => builder =>
    {


        if ((text.Split(';')[text.Split(';').Count() - 1].Count() >= 2)||force)
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "form-control-dark autocomplete-items");




            int tabindex = 0;
            foreach (var c in Dropdown_List)
            {
                if (c.Value.Count > 0)
                {

                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", "autocomplete-category");

                    builder.AddContent(seq++, c.Key);
                    builder.CloseElement();
                    foreach (var k in c.Value)
                    {


                        if ((k.Trim().ToUpper().Contains(text.Trim().ToUpper()) && (k != text)) || force)
                        {
                            tabindex++;
                            var callback = EventCallback.Factory.Create(this, arg =>
                            {
                                text = k;
                            });
                            builder.OpenElement(seq++, "option");
                            builder.AddAttribute(seq++, "onmousedown", callback);
                            builder.AddContent(seq++, k);
                            builder.CloseElement();
                        }




                    }

                }

            }

            builder.CloseElement();
        }
    };
}
